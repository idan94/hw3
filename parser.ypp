%{
   #include "output.hpp"
   using namespace std;
   

   int yylex();
   void yyerror(const char*);
%}

%union{
   int val;
   char op;
}

%nonassoc VOID    
%nonassoc INT     
%nonassoc BYTE    
%nonassoc B       
%nonassoc BOOL    
%nonassoc TRUE    
%nonassoc FALSE   
%nonassoc RETURN  
%nonassoc IF      
%nonassoc WHILE   
%nonassoc BREAK   
%nonassoc CONTINUE
%nonassoc SC      
%nonassoc COMMA   
%nonassoc LBRACE  
%nonassoc RBRACE  
%right ASSIGN 
%left OR   
%left AND    
%left <op> EQUALITY_RELOP   
%nonassoc <op> RELATIONAL_RELOP
%left <op> ADD_BINOP 
%left <op> MUL_BINOP  
%right NOT    
%left LPAREN  
%left RPAREN 
%nonassoc ELSE //Take Else Before RPAREN ')'
%nonassoc ID      
%nonassoc <val> NUM     
%nonassoc STRING  
%%

Program:       Marker1 Funcs       {
   pop(tables);
   pop(offsets);
}
;
Marker1:       /*epsilon*/       {
      t = make_table(null);
      push(t,tables);
      push(0,offsets);
}
Funcs:         /*epsilon*/       {}
               | FuncDecl Funcs        {}
;
FuncDecl:      RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE         {}
;
RetType:       Type        {}
               | VOID         {}
;
Formals:       /*epsilon*/       {}
               | FormalsList        {}
;
FormalsList:   FormalsDecl       {}
               | FormalsDecl COMMA FormalsList        {}
;
FormalsDecl:   Type ID        {}
;
Statements:    Statement         {}
               | Statements Statement        {}
;
Statement:     
               /* Moved here If and While roles. solving 'Dangling Else' */
               IF LPAREN Exp RPAREN Statement       {}
               | IF LPAREN Exp RPAREN Statement ELSE Statement       {}
               | WHILE LPAREN Exp RPAREN Statement       {}
               | WHILE LPAREN Exp RPAREN Statement ELSE Statement       {}
               /* ^^^ Moved here If and While roles. solving 'Dangling Else' ^^^ */
               | LBRACE Marker2 Statements RBRACE         {
                  pop(tables);
                  pop(offsets);
               }
               | Type ID SC         {
                  insert(top(tables), ID.name, vartype.type, top(offsets));
                  top(offsets) += vartype.size;
               }
               | Type ID ASSIGN Exp SC       {}
               | ID ASSIGN Exp SC         {}
               | Call SC         {}
               | RETURN SC       {}
               | RETURN Exp SC         {}
               | BREAK SC        {}
               | CONTINUE SC        {}
;
Marker2:       /*epsilon*/        {
      t = make_table(top(tables));
      push(t,tables);
      push(top(offsets),offsets);
}
;
Call:          ID LPAREN ExpList RPAREN         {}
               | ID LPAREN RPAREN         {}
;
ExpList:       Exp         {}
               | Exp COMMA ExpList        {}
;
Type:          INT         {}
               | BYTE         {}
               | BOOL         {}
;
Exp:           LPAREN Exp RPAREN       {}
               | Exp ADD_BINOP Exp         {}
               | Exp MUL_BINOP Exp         {}
               | ID        {}
               | Call         {}
               | NUM       {}
               | NUM B        {}
               | STRING       {}
               | TRUE         {}
               | FALSE        {}
               | NOT Exp         {}
               | Exp AND Exp        {}
               | Exp OR Exp        {}
               | Exp EQUALITY_RELOP Exp        {}
               | Exp RELATIONAL_RELOP Exp        {}

;

%%

void yyerror(const char*){
   extern int yylineno;
   output::errorSyn(yylineno); 
}

int main(){
  return yyparse();
}